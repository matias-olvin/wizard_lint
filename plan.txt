currently there is an issue with adding jinja templating to code.
It takes a while to add it ~ 10 minutes. I want to at least semi automate the process.

Reqs:
- It needs to add jinja templating only to parts where it is required
- it should not add jinja templating to areas where it is not relevant
- If a key is missing, alert user of the missing key(s)
- It is better for it to be atomic ie if there is an error, nothing happens
- It needs to take in a specified params file
- It should be able to be run on a folder path recursively or on individual files
- It needs to handle Variables from airflow
- It needs to be idempotent

Components:

File Retriever - it needs to scan for sql files given a path. It should only read files inside of path
Parser - it should take in the path to the file that is retrieved and add jinja templating



Parser Notes:

- Loop through all regex matches (comments are an issue)
- Best to pass through a series of filters:

1. replace project
2. check pre-existing jinja templating
3. check value in config file


obtain matches: make dict containing before and after -> modify after according to filters -> replace project.dataset.table in sql string using before for after



 sql_string = """
    CREATE OR REPLACE TABLE
        `storage-prod-olvin-com.postgres_final.SGCenterRaw`
        --  `storage-prod-olvin-com.postgres.SGCenterRaw`
        --  `storage-prod-olvin-com.postgres_final.SGCenterRaw`
        AS
    SELECT
        a.*,
        IFNULL(active_places_count, 0) AS active_places_count,
        IF(IFNULL(active_places_count, 0) > 0, TRUE, FALSE) AS monthly_visits_availability,
        IF(
            IFNULL(high_granularity_count, 0) > 0,
            TRUE,
            FALSE
        ) AS patterns_availability
    FROM
        `storage-prod-olvin-com.sg_places.malls_base` a
        LEFT JOIN (
            SELECT
                fk_parents,
                COUNTIF(activity IN ('active', 'limited_data')) AS active_places_count,
                COUNTIF(activity = 'active') AS high_granularity_count
            FROM
                (
                    SELECT
                        pid,
                        fk_parents,
                        activity
                    FROM
                        `storage-prod-olvin-com.postgres_final.SGPlaceRaw`
                        -- `storage-prod-olvin-com.postgres.SGPlaceRaw`
                        -- `storage-prod-olvin-com.postgres_final.SGPlaceRaw`
                        INNER JOIN `storage-prod-olvin-com.postgres_final.SGPlaceActivity`
                        -- `storage-prod-olvin-com.postgres.SGPlaceActivity`
                        -- `storage-prod-olvin-com.postgres_final.SGPlaceActivity`
                        ON pid = fk_sgplaces
                )
            GROUP BY
                fk_parents
        ) ON a.pid = fk_parents
    """